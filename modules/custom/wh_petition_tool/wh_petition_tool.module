<?php
/**
 * @file wh_petition_tool.module
 */

define ('WH_PETITION_TOOL_PETITION_HOSTNAME', 'https://petitions.whitehouse.gov');

/**
 * Implements hook_permissions().
 */
function wh_petition_tool_permission() {
  return array(
    'administer petition tool hub settings' => array(
      'title' => t('Administer Petition Tool hub Settings settings'),
      'description' => t('Manage the configuration of the Petition Tool Web Services integration with the OpenSaaS Hub'),
    ),
  );
}

/**
 * Implementation of hook_menu().
 */
function wh_petition_tool_menu() {
  $items['admin/petitions/settings/petition-tool-hub'] = array(
    'title' => 'Petition Tool Hub Settings',
    'description' => 'Manage Petition Tool Web Service integration with OpenSaas Hub.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('wh_petition_tool_hub_settings'),
    'access arguments' => array('administer petition tool hub settings'),
    'file' => 'wh_petition_tool.admin.inc',
    'type' => MENU_LOCAL_TASK,
  );
  return $items;
}

/**
 * Implementation of hook_theme().
 *
 * Addes the json theme key and tells Drupal to use our substitute for
 * html.tpl.php, but still render the page's content as a page. This way, we
 * can use the page's render array to encode as json
 */
function wh_petition_tool_theme() {
  return array(
    'json' => array(
      'render element' => 'page',
      'template' => 'json',
    ),
    'esi' => array(
      'render element' => 'page',
      'template' => 'esi',
    ),
    'wh_petition_tool_left_nav' => array(
      'arguments' => array(),
      'template' => 'wh-petition-tool-left-nav',
    ),
  );
}

/**
 * Implementation of hook_page_alter().
 *
 * Looks for the wrapper parameter that is sent by the AJAX requests.
 */
function wh_petition_tool_page_alter(&$page) {
  if (!empty($_GET['wrapper']) || !empty($_GET['t'])) {
    $page['#show_messages'] = FALSE;
    if ($_GET['wrapper'] == 'json') {
      $page['#theme_wrappers'] = array('json');
    }
    elseif ($_GET['wrapper'] == 'esi') {
      $page['#theme_wrappers'] = array('esi');
    }
  }
}

/**
 * Implements hook_preprocess_node().
 *
 * Adds the left nav to page nodes.
 */
function wh_petition_tool_preprocess_node(&$vars) {
  $vars['left_nav'] = '';
  if ($vars['node']->type == 'wh_petitions_page') {
    $vars['left_nav'] = wh_petition_tool_left_nav();
  }
}

/**
 * Implements hook_preprocess_page().
 *
 * Adds the top right text and node type as variables available to the page template.
 */
function wh_petition_tool_preprocess_page(&$vars) {
  $vars['top_right_text'] = variable_get('wh_petitions_top_right_text', '');
  $node_type = '';
  if (!empty($vars['node'])) {
    $node_type = $vars['node']->type;
  }
  $vars['node_type'] = $node_type;
}

/**
 * Themes the left nav on page nodes.
 */
function wh_petition_tool_left_nav() {
  $menu_links = menu_tree_page_data('menu-how-why', 2, FALSE);
  $links = array();

  foreach ($menu_links as $id => $menu_item) {
    if ($menu_item['link']['depth'] == 1 && !$menu_item['link']['hidden']) {
      $links[] = $menu_item['link'];
    }
  }

  return theme('wh_petition_tool_left_nav', array('links' => $links));
}

/**
 * Request a Short URL from the OpenSaas Hub site.
 *
 * @param $url
 *    The original relative URL
 *
 * @return
 *    The wh.gov short URL or NULL on failure.
 */
function wh_petition_tool_shortenurl($url) {
  global $base_url;
  $url = $base_url . $url;
  $short = shorten_url($original = $url, $service = '');
  return $short;
}
/**
 * Implements hook_form_FORM_ID_alter().
 *
 * Alters the forward form to uncollapse by default since it's on its own page, add the appropriate submit button, and add a submit handler.
 */
function wh_petition_tool_form_forward_form_alter(&$form, &$form_state) {
  $form['message']['#collapsed'] = FALSE;
  $form['message']['#collapsible'] = FALSE;
  array_push($form['#submit'], 'wh_petition_tool_forward_submit');
  $form['message']['actions']['submit']['#attributes'] = array('class' => array('button-email-this-petition', 'button'));
  if (arg(0) == 'response') {
    array_push($form['message']['actions']['submit']['#attributes']['class'], 'blue-button');
    $form['message']['actions']['submit']['#value'] = t('Email This Response');
    $nid = arg(2);
    $form['message']['nid'] = array(
      '#type' => 'hidden',
      '#value' => check_plain($nid),
    );
  }

  $message = '';
  if (arg(0) == 'petition') {
    $message = variable_get('wh_petitions_email_forward_text', '');
    $petition_id = arg(2);

    $petition = PetitionsController::load($petition_id);

    if (!empty($petition)) {
      $time = $petition['published'];
      $end_date = strtotime('+' . $petition['review_timeframe'] . ' days', $time);
      $end_date = date("F d, Y", $end_date);

      // In case the short URL isn't available, use the absolute form of the
      // nice URL to use in emails, so that there's at least *something* to
      // click on. We don't want to store that value in the short_url of the
      // petition so that we can regenerate it later (leave it as false).
      $full_link = petitions_data_url($petition['url']);

      if (empty($petition['short_url'])) {
        $petition['short_url'] = $full_link;
      }

      $message = str_replace('!petition_description', $petition['body'], $message);
      $message = str_replace('!shorturl', $petition['short_url'], $message);
      $message = str_replace('!signatures_needed', wh_petitions_format_number($petition['signaturesPublic']), $message);
      $message = str_replace('!date_needed', $end_date, $message);
    }
  }
  else {
    $message = variable_get('wh_petitions_email_forward_response_text', '');
    $nid = arg(2);
    $node = node_load($nid);
    $short_url = $node->field_shorturl[$node->language][0]['value'];
    if (!empty($node)) {
      $message = str_replace('!shorturl', $short_url, $message);
    }
  }
  $message = str_replace("\r\n", "<br />", $message);

  $form['preview'] = array(
    '#type' => 'markup',
    '#markup' => $message,
    '#prefix' => '<br /><br />',
    '#weight' => 100,
  );
}

/**
 * Forward form submit handler.  Redirects to the appropriate thank you page based on petition or response.
 *
 * @todo - Ben - If emailing a petition or response is ever enabled we will need to revise this to remove
 *              hostname and verify the petition id in the args array.
 */
function wh_petition_tool_forward_submit(&$form, &$form_state) {
  global $base_url;
  $host = variable_get('main_hostname', '') . '/petition-tool';
  if (!empty($host)) {
    if ($form_state['values']['op'] == 'Email This Response') {
      $url = rtrim($host, '/') . '/response/email_thank';
      $nid = $form_state['values']['nid'];
      if (!empty($nid)) {
        $url .= '/' . check_plain($nid);
      }
    }
    else {
      $url = rtrim($host, '/') . '/petition/email_thank';
      $petition_id = arg(2);
      if (!empty($petition_id)) {
        $url .= '/' . check_plain($petition_id);
      }
    }
  }
  $form_state['redirect'] =  $url;
}

/**
 * Implements hook_menu_link_alter().
 *
 * Alters the description and title for the Content admin menu path.
 */
function wh_petition_tool_menu_link_alter(&$item) {
  if ($item['link_path'] == 'admin/content') {
    $item['description'] = t('Find and manage responses and pages.');
    $item['options']['attributes']['title'] = t('Find and manage responses and pages.');
  }
}

/**
 * Implements hook_mail_alter().
 *
 * Alters the text of the forward email message to insert petition and response-specific variables.
 */
function wh_petition_tool_mail_alter(&$message) {
  if ($message['id'] == 'forward_forward_page') {
    if (arg(0) == 'petition') {
      $conn = wh_petitions_mongo_petition_connection();
      $petition_id = arg(2);
      $petition = $conn->findOne(array('_id' => new MongoId($petition_id)), array('response_signatures', 'short_url', 'body', 'title', 'published', 'review_timeframe'));

      if (!empty($petition)) {
        $time = $petition['published'];
        $end_date = strtotime('+' . $petition['review_timeframe'] . ' days', $time);
        $end_date = date("F d, Y", $end_date);

        if (empty($petition['short_url'])) $petition['short_url'] = '';

        $message['body'][0] = str_replace('!petition_description', $petition['body'], $message['body'][0]);
        $message['body'][0] = str_replace('!shorturl', $petition['short_url'], $message['body'][0]);
        $message['body'][0] = str_replace('!signatures_needed', wh_petitions_format_number($petition['response_signatures']), $message['body'][0]);
        $message['body'][0] = str_replace('!date_needed', $end_date, $message['body'][0]);
        $message['params']['body'] = str_replace('!petition_description', $petition['body'], $message['params']['body']);
        $message['params']['body'] = str_replace('!shorturl', $petition['short_url'], $message['params']['body']);
        $message['params']['body'] = str_replace('!signatures_needed', wh_petitions_format_number($petition['response_signatures']), $message['params']['body']);
        $message['params']['body'] = str_replace('!date_needed', $end_date, $message['params']['body']);
        $message['subject'] = $petition['title'];
        $message['params']['subject'] = $petition['title'];
      }
    }
    else {
      $nid = arg(2);
      $node = node_load($nid);
      $short_url = $node->field_shorturl[$node->language][0]['value'];
      if (!empty($node)) {
        $message['body'][0] = str_replace('!shorturl', $short_url, $message['body'][0]);
        $message['params']['body'] = str_replace('!shorturl', $short_url, $message['params']['body']);
        $message['subject'] = check_plain($node->title);
        $message['params']['subject'] = check_plain($node->title);
      }
    }
  }
}

/**
 * Themes the twitter link on petitions and responses.
 */
function wh_petition_tool_twitter_link($id, $title, $type = 'petition', $link_text='', $short_url='', $path='') {
  global $base_url;
  if (empty($short_url)) {
    $short_url = $base_url .'/'. $path;
  }
  $link = 'http://twitter.com/share?';
  $link .= 'url=' . $short_url;
  $link .= '&amp;text=' . urlencode($title);
  $link .= '&amp;counturl=' . $base_url .'/'. $path;

  if (empty($link_text)) {
    $link_text = t('Twitter');
  }

  return '<a href="#" class="social-share fa fa-twitter" onclick=\'window.open("' . $link . '", "twitter", "status=0,toolbar=0,location=0,menubar=0,height=370,width=550,resizable=0"); return false;\'>' . $link_text . '</a>';
}

/**
 * Themes the facebook share link on petitions and responses.
 */
function wh_petition_tool_facebook_link($id, $title, $type = 'petition', $link_text='', $path='') {
  global $base_url;
  $url = $base_url . "/$path";

  if (empty($link_text)) {
    $link_text = t('Facebook');
  }

  return '<a href="#" class="social-share fa fa-facebook-official" onclick=\'window.open("http://www.facebook.com/share.php?u=' . urlencode($url) . '&amp;t='.urlencode($title) . '", "facebook", "status=0,toolbar=0,location=0,menubar=0,height=500,width=800,resizable=1"); return false;\'>' . $link_text . '</a>';
}

/**
 * Creates an email share link for petitions and responses.
 *
 * @param string $link_text
 *   The link text.
 * @param string $email_subject
 *   The translated email subject line.
 * @param string $email_body
 *   The translated email body.
 *
 * @return string
 *   A themed HTML email link.
 */
function wh_petition_tool_email_link($link_text, $email_subject, $email_body) {
  $path = 'mailto:';
  $options = array(
    'attributes' => array(
      'class' => array('social-share fa fa-envelope'),
    ),
    'absolute' => TRUE,
    'query' => array(
      'subject' => $email_subject,
      'body' => $email_body,
    ),
  );
  return l($link_text, $path, $options);
}
